package com.github.mmolimar.ksql.jdbc

import java.sql.{Array, Blob, CallableStatement, Clob, Connection, DatabaseMetaData, NClob, PreparedStatement, SQLWarning, SQLXML, Savepoint, Statement, Struct}
import java.util
import java.util.Properties
import java.util.concurrent.Executor

import com.github.mmolimar.ksql.jdbc.helpers.Exceptions._
import com.github.mmolimar.ksql.jdbc.helpers.NotSupported

case class KsqlConnectionValues(brokerList: String, props: Map[String, String])

class KsqlConnection(values: KsqlConnectionValues) extends Connection {

  override def setAutoCommit(autoCommit: Boolean): Unit = wrapExceptionAndThrow(NotSupported())

  override def setHoldability(holdability: Int): Unit = wrapExceptionAndThrow(NotSupported())

  override def clearWarnings(): Unit = wrapExceptionAndThrow(NotSupported())

  override def getNetworkTimeout: Int = wrapExceptionAndThrow(NotSupported())

  override def createBlob(): Blob = wrapExceptionAndThrow(NotSupported())

  override def createSQLXML(): SQLXML = wrapExceptionAndThrow(NotSupported())

  override def setSavepoint(): Savepoint = wrapExceptionAndThrow(NotSupported())

  override def setSavepoint(name: String): Savepoint = wrapExceptionAndThrow(NotSupported())

  override def createNClob(): NClob = wrapExceptionAndThrow(NotSupported())

  override def getTransactionIsolation: Int = wrapExceptionAndThrow(NotSupported())

  override def getClientInfo(name: String): String = wrapExceptionAndThrow(NotSupported())

  override def getClientInfo: Properties = wrapExceptionAndThrow(NotSupported())

  override def getSchema: String = wrapExceptionAndThrow(NotSupported())

  override def setNetworkTimeout(executor: Executor, milliseconds: Int):
  Unit = wrapExceptionAndThrow(NotSupported())

  override def getMetaData: DatabaseMetaData = wrapExceptionAndThrow(NotSupported())

  override def getTypeMap: util.Map[String, Class[_]] = wrapExceptionAndThrow(NotSupported())

  override def rollback(): Unit = wrapExceptionAndThrow(NotSupported())

  override def rollback(savepoint: Savepoint): Unit = wrapExceptionAndThrow(NotSupported())

  override def createStatement(): Statement = wrapExceptionAndThrow(NotSupported())

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int):
  Statement = wrapExceptionAndThrow(NotSupported())

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int):
  Statement = wrapExceptionAndThrow(NotSupported())

  override def getHoldability: Int = wrapExceptionAndThrow(NotSupported())

  override def setReadOnly(readOnly: Boolean): Unit = wrapExceptionAndThrow(NotSupported())

  override def setClientInfo(name: String, value: String): Unit = wrapExceptionAndThrow(NotSupported())

  override def setClientInfo(properties: Properties): Unit = wrapExceptionAndThrow(NotSupported())

  override def isReadOnly: Boolean = wrapExceptionAndThrow(NotSupported())

  override def setTypeMap(map: util.Map[String, Class[_]]): Unit = wrapExceptionAndThrow(NotSupported())

  override def getCatalog: String = wrapExceptionAndThrow(NotSupported())

  override def createClob(): Clob = wrapExceptionAndThrow(NotSupported())

  override def nativeSQL(sql: String): String = wrapExceptionAndThrow(NotSupported())

  override def setTransactionIsolation(level: Int): Unit = wrapExceptionAndThrow(NotSupported())

  override def prepareCall(sql: String): CallableStatement = wrapExceptionAndThrow(NotSupported())

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int):
  CallableStatement = wrapExceptionAndThrow(NotSupported())

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int):
  CallableStatement = wrapExceptionAndThrow(NotSupported())

  override def createArrayOf(typeName: String, elements: scala.Array[AnyRef]):
  Array = wrapExceptionAndThrow(NotSupported())

  override def setCatalog(catalog: String): Unit = wrapExceptionAndThrow(NotSupported())

  override def close(): Unit = wrapExceptionAndThrow(NotSupported())

  override def getAutoCommit: Boolean = wrapExceptionAndThrow(NotSupported())

  override def abort(executor: Executor): Unit = wrapExceptionAndThrow(NotSupported())

  override def isValid(timeout: Int): Boolean = wrapExceptionAndThrow(NotSupported())

  override def prepareStatement(sql: String): PreparedStatement = wrapExceptionAndThrow(NotSupported())

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int):
  PreparedStatement = wrapExceptionAndThrow(NotSupported())

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int):
  PreparedStatement = wrapExceptionAndThrow(NotSupported())

  override def prepareStatement(sql: String, autoGeneratedKeys: Int):
  PreparedStatement = wrapExceptionAndThrow(NotSupported())

  override def prepareStatement(sql: String, columnIndexes: scala.Array[Int]):
  PreparedStatement = wrapExceptionAndThrow(NotSupported())

  override def prepareStatement(sql: String, columnNames: scala.Array[String]):
  PreparedStatement = wrapExceptionAndThrow(NotSupported())

  override def releaseSavepoint(savepoint: Savepoint): Unit = wrapExceptionAndThrow(NotSupported())

  override def isClosed: Boolean = wrapExceptionAndThrow(NotSupported())

  override def createStruct(typeName: String, attributes: scala.Array[AnyRef]):
  Struct = wrapExceptionAndThrow(NotSupported())

  override def getWarnings: SQLWarning = wrapExceptionAndThrow(NotSupported())

  override def setSchema(schema: String): Unit = wrapExceptionAndThrow(NotSupported())

  override def commit(): Unit = wrapExceptionAndThrow(NotSupported())

  override def unwrap[T](iface: Class[T]): T = wrapExceptionAndThrow(NotSupported())

  override def isWrapperFor(iface: Class[_]): Boolean = wrapExceptionAndThrow(NotSupported())
}
